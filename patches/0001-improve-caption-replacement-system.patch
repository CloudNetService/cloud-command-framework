From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derklaro <git@derklaro.dev>
Date: Thu, 16 Jun 2022 15:46:50 +0200
Subject: [PATCH] improve caption replacement system


diff --git a/cloud-core/src/main/java/cloud/commandframework/CommandTree.java b/cloud-core/src/main/java/cloud/commandframework/CommandTree.java
index 7486d3bc4b875246d08bf7421535a1b3c0076932..9f507c88a41940a366e7e7dc37185039f9302dc5 100644
--- a/cloud-core/src/main/java/cloud/commandframework/CommandTree.java
+++ b/cloud-core/src/main/java/cloud/commandframework/CommandTree.java
@@ -142,7 +142,11 @@ public final class CommandTree<C> {
                     new NoSuchCommandException(
                             commandContext.getSender(),
                             new ArrayList<>(),
-                            this.stringOrEmpty(args.peek())
+                            // cloudnet start - better captions
+                            this.stringOrEmpty(args.peek()),
+                            cloud.commandframework.captions.StandardCaptionKeys.NO_SUCH_COMMAND,
+                            commandContext.getCaptionVariableReplacementHandler()
+                            // cloudnet end
                     )
             );
         }
@@ -162,7 +166,10 @@ public final class CommandTree<C> {
                         commandContext.getSender(),
                         command.getSenderType().get(),
                         new ArrayList<>(command.getArguments()),
-                        command
+                        // cloudnet start - better captions
+                        command,
+                        commandContext.getCaptionVariableReplacementHandler()
+                        // cloudnet end
                 ));
             }
         }
@@ -185,7 +192,10 @@ public final class CommandTree<C> {
                             .stream()
                             .filter(node -> node.getValue() != null)
                             .map(Node::getValue)
-                            .collect(Collectors.toList())
+                            // cloudnet start
+                            .collect(Collectors.toList()),
+                    commandContext.getCaptionVariableReplacementHandler()
+                    // cloudnet end
             ));
         }
 
@@ -214,7 +224,10 @@ public final class CommandTree<C> {
                             .stream()
                             .filter(node -> node.getValue() != null)
                             .map(Node::getValue)
-                            .collect(Collectors.toList())
+                            // cloudnet start - better captions
+                            .collect(Collectors.toList()),
+                            commandContext.getCaptionVariableReplacementHandler()
+                            // cloudnet end
                     ));
                 }
             } else {
@@ -226,7 +239,10 @@ public final class CommandTree<C> {
                         .stream()
                         .filter(node -> node.getValue() != null)
                         .map(Node::getValue)
-                        .collect(Collectors.toList())
+                        // cloudnet start - better captions
+                        .collect(Collectors.toList()),
+                        commandContext.getCaptionVariableReplacementHandler()
+                        // cloudnet end
                 ));
             }
         } else {
@@ -255,7 +271,11 @@ public final class CommandTree<C> {
                 return Pair.of(null, new NoSuchCommandException(
                         commandContext.getSender(),
                         this.getChain(root).stream().map(Node::getValue).collect(Collectors.toList()),
-                        this.stringOrEmpty(commandQueue.peek())
+                        // cloudnet start - better captions
+                        this.stringOrEmpty(commandQueue.peek()),
+                        cloud.commandframework.captions.StandardCaptionKeys.NO_SUCH_COMMAND,
+                        commandContext.getCaptionVariableReplacementHandler()
+                        // cloudnet end
                 ));
             }
             /* If we couldn't match a child, check if there's a command attached and execute it */
@@ -272,7 +292,10 @@ public final class CommandTree<C> {
                                     .stream()
                                     .filter(node -> node.getValue() != null)
                                     .map(Node::getValue)
-                                    .collect(Collectors.toList())
+                                    // cloudnet start - better captions
+                                    .collect(Collectors.toList()),
+                            commandContext.getCaptionVariableReplacementHandler()
+                            // cloudnet end
                     ));
                 }
                 return Pair.of(root.getValue().getOwningCommand(), null);
@@ -285,7 +308,10 @@ public final class CommandTree<C> {
                     .stream()
                     .filter(node -> node.getValue() != null)
                     .map(Node::getValue)
-                    .collect(Collectors.toList())
+                    // cloudnet start - better captions
+                    .collect(Collectors.toList()),
+                    commandContext.getCaptionVariableReplacementHandler()
+                    // cloudnet end
             ));
         }
     }
@@ -336,7 +362,10 @@ public final class CommandTree<C> {
                                 .stream()
                                 .filter(node -> node.getValue() != null)
                                 .map(Node::getValue)
-                                .collect(Collectors.toList())
+                                // cloudnet start - better captions
+                                .collect(Collectors.toList()),
+                        commandContext.getCaptionVariableReplacementHandler()
+                        // cloudnet end
                 ));
             }
             if (child.getValue() != null) {
@@ -373,7 +402,10 @@ public final class CommandTree<C> {
                                                 .stream()
                                                 .filter(node -> node.getValue() != null)
                                                 .map(Node::getValue)
-                                                .collect(Collectors.toList())
+                                                // cloudnet start - better captions
+                                                .collect(Collectors.toList()),
+                                        commandContext.getCaptionVariableReplacementHandler()
+                                        // cloudnet end
                                 ));
                             }
                             return Pair.of(command, null);
@@ -389,7 +421,10 @@ public final class CommandTree<C> {
                                 .stream()
                                 .filter(node -> node.getValue() != null)
                                 .map(Node::getValue)
-                                .collect(Collectors.toList())
+                                // cloudnet start - better captions
+                                .collect(Collectors.toList()),
+                                commandContext.getCaptionVariableReplacementHandler()
+                                // cloudnet end
                         ));
                     } else {
                         /* The child is not a leaf, but may have an intermediary executor, attempt to use it */
@@ -406,7 +441,10 @@ public final class CommandTree<C> {
                                                 .stream()
                                                 .filter(node -> node.getValue() != null)
                                                 .map(Node::getValue)
-                                                .collect(Collectors.toList())
+                                                // cloudnet start - better captions
+                                                .collect(Collectors.toList()),
+                                        commandContext.getCaptionVariableReplacementHandler()
+                                        // cloudnet end
                                 ));
                             }
                             return Pair.of(command, null);
@@ -419,7 +457,10 @@ public final class CommandTree<C> {
                                 .stream()
                                 .filter(node -> node.getValue() != null)
                                 .map(Node::getValue)
-                                .collect(Collectors.toList())
+                                // cloudnet start - better captions
+                                .collect(Collectors.toList()),
+                                commandContext.getCaptionVariableReplacementHandler()
+                                // cloudnet end
                         ));
                     }
                 }
@@ -457,7 +498,10 @@ public final class CommandTree<C> {
                                     .stream()
                                     .filter(node -> node.getValue() != null)
                                     .map(Node::getValue)
-                                    .collect(Collectors.toList())
+                                    // cloudnet start - better captions
+                                    .collect(Collectors.toList()),
+                                    commandContext.getCaptionVariableReplacementHandler()
+                                    // cloudnet end
                             ));
                         }
                     } else {
diff --git a/cloud-core/src/main/java/cloud/commandframework/arguments/compound/FlagArgument.java b/cloud-core/src/main/java/cloud/commandframework/arguments/compound/FlagArgument.java
index b48c53b78be2d1fe5aa69fbe0e3524aea17c247e..02a26678f112d53405b76f987aa549e8a0606896 100644
--- a/cloud-core/src/main/java/cloud/commandframework/arguments/compound/FlagArgument.java
+++ b/cloud-core/src/main/java/cloud/commandframework/arguments/compound/FlagArgument.java
@@ -497,8 +497,11 @@ public final class FlagArgument<C> extends CommandArgument<C, Object> {
                     FlagArgument.FlagArgumentParser.class,
                     context,
                     failureReason.getCaption(),
-                    CaptionVariable.of("input", input),
-                    CaptionVariable.of("flag", input)
+                    // cloudnet start - better captions
+                    input, input
+                    //CaptionVariable.of("input", input),
+                    //CaptionVariable.of("flag", input)
+                    // cloudnet end
             );
             this.input = input;
             this.failureReason = failureReason;
diff --git a/cloud-core/src/main/java/cloud/commandframework/arguments/preprocessor/RegexPreprocessor.java b/cloud-core/src/main/java/cloud/commandframework/arguments/preprocessor/RegexPreprocessor.java
index c5b33dc34cb6237604fb78dbd3d33a9f6b09d349..266af86a31f584afd431a10b974d0208dec9367e 100644
--- a/cloud-core/src/main/java/cloud/commandframework/arguments/preprocessor/RegexPreprocessor.java
+++ b/cloud-core/src/main/java/cloud/commandframework/arguments/preprocessor/RegexPreprocessor.java
@@ -116,7 +116,7 @@ public final class RegexPreprocessor<C> implements BiFunction<@NonNull CommandCo
      */
     @SuppressWarnings("serial")
     @API(status = API.Status.STABLE)
-    public static final class RegexValidationException extends IllegalArgumentException {
+    public static final class RegexValidationException extends eu.cloudnetservice.CaptionedCommandException { // cloudnet
 
         private static final long serialVersionUID = 747826566058072233L;
         private final String pattern;
@@ -130,6 +130,7 @@ public final class RegexPreprocessor<C> implements BiFunction<@NonNull CommandCo
                 final @NonNull Caption failureCaption,
                 final @NonNull CommandContext<?> commandContext
         ) {
+            super(failureCaption, commandContext.getCaptionVariableReplacementHandler(), failedString, pattern); // cloudnet
             this.pattern = pattern;
             this.failedString = failedString;
             this.failureCaption = failureCaption;
@@ -138,6 +139,9 @@ public final class RegexPreprocessor<C> implements BiFunction<@NonNull CommandCo
 
         @Override
         public String getMessage() {
+            // cloudnet start - better captions
+            if (true) return super.getMessage();
+            // cloudnet end
             return this.commandContext.formatMessage(
                     this.failureCaption,
                     CaptionVariable.of(
diff --git a/cloud-core/src/main/java/cloud/commandframework/arguments/standard/BooleanArgument.java b/cloud-core/src/main/java/cloud/commandframework/arguments/standard/BooleanArgument.java
index acac58aae76a47b3f385bd7d29bf1eed11b7a69a..285edf221137356dfe9e6eada06a4dec453239d0 100644
--- a/cloud-core/src/main/java/cloud/commandframework/arguments/standard/BooleanArgument.java
+++ b/cloud-core/src/main/java/cloud/commandframework/arguments/standard/BooleanArgument.java
@@ -287,7 +287,10 @@ public final class BooleanArgument<C> extends CommandArgument<C, Boolean> {
                     BooleanParser.class,
                     context,
                     StandardCaptionKeys.ARGUMENT_PARSE_FAILURE_BOOLEAN,
-                    CaptionVariable.of("input", input)
+                    // cloudnet start - better captions
+                    input
+                    //CaptionVariable.of("input", input)
+                    // cloudnet end
             );
             this.input = input;
             this.liberal = liberal;
diff --git a/cloud-core/src/main/java/cloud/commandframework/arguments/standard/CharArgument.java b/cloud-core/src/main/java/cloud/commandframework/arguments/standard/CharArgument.java
index ec739d55a2e908bbf630e7b05ab46018c7f3027b..8a67776db337662a8116b85f638885e1703ff073 100644
--- a/cloud-core/src/main/java/cloud/commandframework/arguments/standard/CharArgument.java
+++ b/cloud-core/src/main/java/cloud/commandframework/arguments/standard/CharArgument.java
@@ -192,7 +192,10 @@ public final class CharArgument<C> extends CommandArgument<C, Character> {
                     CharacterParser.class,
                     context,
                     StandardCaptionKeys.ARGUMENT_PARSE_FAILURE_CHAR,
-                    CaptionVariable.of("input", input)
+                    // cloudnet start - better captions
+                    input
+                    //CaptionVariable.of("input", input)
+                    // cloudnet end
             );
             this.input = input;
         }
diff --git a/cloud-core/src/main/java/cloud/commandframework/arguments/standard/DurationArgument.java b/cloud-core/src/main/java/cloud/commandframework/arguments/standard/DurationArgument.java
index eebe3651fc9b75a45457996501c4eda713da681c..2acdd533d22a0934275f34c547cc2fa4fc595600 100644
--- a/cloud-core/src/main/java/cloud/commandframework/arguments/standard/DurationArgument.java
+++ b/cloud-core/src/main/java/cloud/commandframework/arguments/standard/DurationArgument.java
@@ -304,7 +304,10 @@ public final class DurationArgument<C> extends CommandArgument<C, Duration> {
                     Parser.class,
                     context,
                     StandardCaptionKeys.ARGUMENT_PARSE_FAILURE_DURATION,
-                    CaptionVariable.of("input", input)
+                    // cloudnet start - better captions
+                    input
+                    //CaptionVariable.of("input", input)
+                    // cloudnet end
             );
             this.input = input;
         }
diff --git a/cloud-core/src/main/java/cloud/commandframework/arguments/standard/EnumArgument.java b/cloud-core/src/main/java/cloud/commandframework/arguments/standard/EnumArgument.java
index 578ae932865d779b6e7fe0e4c54d0d5339996416..d7a9dba028ed92dd782fc19969a83f340a327411 100644
--- a/cloud-core/src/main/java/cloud/commandframework/arguments/standard/EnumArgument.java
+++ b/cloud-core/src/main/java/cloud/commandframework/arguments/standard/EnumArgument.java
@@ -248,8 +248,11 @@ public class EnumArgument<C, E extends Enum<E>> extends CommandArgument<C, E> {
                     EnumParser.class,
                     context,
                     StandardCaptionKeys.ARGUMENT_PARSE_FAILURE_ENUM,
-                    CaptionVariable.of("input", input),
-                    CaptionVariable.of("acceptableValues", join(enumClass))
+                    // cloudnet start - better captions
+                    input, join(enumClass)
+                    //CaptionVariable.of("input", input),
+                    //CaptionVariable.of("acceptableValues", join(enumClass))
+                    // cloudnet end
             );
             this.input = input;
             this.enumClass = enumClass;
diff --git a/cloud-core/src/main/java/cloud/commandframework/arguments/standard/StringArgument.java b/cloud-core/src/main/java/cloud/commandframework/arguments/standard/StringArgument.java
index 674896f6184e8b599ef0b265f465d7f63004a755..e7e5c82e9a0928d91b343c8084103430e6337095 100644
--- a/cloud-core/src/main/java/cloud/commandframework/arguments/standard/StringArgument.java
+++ b/cloud-core/src/main/java/cloud/commandframework/arguments/standard/StringArgument.java
@@ -506,8 +506,11 @@ public final class StringArgument<C> extends CommandArgument<C, String> {
                     StringParser.class,
                     context,
                     StandardCaptionKeys.ARGUMENT_PARSE_FAILURE_STRING,
-                    CaptionVariable.of("input", input),
-                    CaptionVariable.of("stringMode", stringMode.name())
+                    // cloudnet start - better captions
+                    input, stringMode.name()
+                    //CaptionVariable.of("input", input),
+                    //CaptionVariable.of("stringMode", stringMode.name())
+                    // cloudnet end
             );
             this.input = input;
             this.stringMode = stringMode;
diff --git a/cloud-core/src/main/java/cloud/commandframework/arguments/standard/UUIDArgument.java b/cloud-core/src/main/java/cloud/commandframework/arguments/standard/UUIDArgument.java
index 4084553895159cc4c29b258e4629b44e1b6c3993..031a89360634b97830611b34c361c916b573a503 100644
--- a/cloud-core/src/main/java/cloud/commandframework/arguments/standard/UUIDArgument.java
+++ b/cloud-core/src/main/java/cloud/commandframework/arguments/standard/UUIDArgument.java
@@ -198,7 +198,10 @@ public final class UUIDArgument<C> extends CommandArgument<C, UUID> {
                     UUIDParser.class,
                     context,
                     StandardCaptionKeys.ARGUMENT_PARSE_FAILURE_UUID,
-                    CaptionVariable.of("input", input)
+                    // cloudnet start - better captions
+                    input
+                    //CaptionVariable.of("input", input)
+                    // cloudnet end
             );
             this.input = input;
         }
diff --git a/cloud-core/src/main/java/cloud/commandframework/captions/CaptionVariableReplacementHandler.java b/cloud-core/src/main/java/cloud/commandframework/captions/CaptionVariableReplacementHandler.java
index 70c4bac3b0fa752805f22fdcc74361c0973a27b3..7926d98825aaf27f21763984102db7642f0bcbca 100644
--- a/cloud-core/src/main/java/cloud/commandframework/captions/CaptionVariableReplacementHandler.java
+++ b/cloud-core/src/main/java/cloud/commandframework/captions/CaptionVariableReplacementHandler.java
@@ -39,5 +39,12 @@ public interface CaptionVariableReplacementHandler {
      * @param variables Variables
      * @return Transformed message
      */
-    @NonNull String replaceVariables(@NonNull String string, @NonNull CaptionVariable... variables);
+    // cloudnet start - don't wrap caption variables
+    default @NonNull String replaceVariables(@NonNull String string, @NonNull CaptionVariable... variables) {
+        return string;
+    }
+    default @NonNull String replaceVariables(@NonNull Caption caption, @NonNull Object... variables) {
+        return caption.getKey();
+    }
+    // cloudnet end
 }
diff --git a/cloud-core/src/main/java/cloud/commandframework/captions/StandardCaptionKeys.java b/cloud-core/src/main/java/cloud/commandframework/captions/StandardCaptionKeys.java
index 25a91167c153063afb41ea28c078be9f5f86a8eb..641196d69ddcb510939497c57a0c65a16d62e2e8 100644
--- a/cloud-core/src/main/java/cloud/commandframework/captions/StandardCaptionKeys.java
+++ b/cloud-core/src/main/java/cloud/commandframework/captions/StandardCaptionKeys.java
@@ -40,7 +40,7 @@ public final class StandardCaptionKeys {
     /**
      * Variables: None
      */
-    public static final Caption ARGUMENT_PARSE_FAILURE_NO_INPUT_PROVIDED = of("argument.parse.failure.no_input_was_provided");
+    public static final Caption ARGUMENT_PARSE_FAILURE_NO_INPUT_PROVIDED = of("argument.parse.failure.no-input-was-provided"); // cloudnet
     /**
      * Variables: {input}
      */
@@ -76,19 +76,19 @@ public final class StandardCaptionKeys {
     /**
      * Variables: {flag}
      */
-    public static final Caption ARGUMENT_PARSE_FAILURE_FLAG_DUPLICATE_FLAG = of("argument.parse.failure.flag.duplicate_flag");
+    public static final Caption ARGUMENT_PARSE_FAILURE_FLAG_DUPLICATE_FLAG = of("argument.parse.failure.flag.duplicate-flag"); // cloudnet
     /**
      * Variables: {input}
      */
-    public static final Caption ARGUMENT_PARSE_FAILURE_FLAG_NO_FLAG_STARTED = of("argument.parse.failure.flag.no_flag_started");
+    public static final Caption ARGUMENT_PARSE_FAILURE_FLAG_NO_FLAG_STARTED = of("argument.parse.failure.flag.no-flag-started"); // cloudnet
     /**
      * Variables: {flag}
      */
-    public static final Caption ARGUMENT_PARSE_FAILURE_FLAG_MISSING_ARGUMENT = of("argument.parse.failure.flag.missing_argument");
+    public static final Caption ARGUMENT_PARSE_FAILURE_FLAG_MISSING_ARGUMENT = of("argument.parse.failure.flag.missing-argument"); // cloudnet
     /**
      * Variables: {flag}
      */
-    public static final Caption ARGUMENT_PARSE_FAILURE_FLAG_NO_PERMISSION = of("argument.parse.failure.flag.no_permission");
+    public static final Caption ARGUMENT_PARSE_FAILURE_FLAG_NO_PERMISSION = of("argument.parse.failure.flag.no-permission"); // cloudnet
     /**
      * Variables: {input}
      */
@@ -98,6 +98,13 @@ public final class StandardCaptionKeys {
      */
     public static final Caption ARGUMENT_PARSE_FAILURE_DURATION = of("argument.parse.failure.duration");
 
+    // cloudnet start
+    public static final Caption INVALID_COMMAND_SENDER = of("invalid.command.sender");
+    public static final Caption INVALID_COMMAND_SYNTAX = of("invalid.command.syntax");
+    public static final Caption MISSING_COMMAND_PERMISSION = of("missing.command.permission");
+    public static final Caption NO_SUCH_COMMAND = of("no.such.command");
+    // cloudnet end
+
     private StandardCaptionKeys() {
     }
 
diff --git a/cloud-core/src/main/java/cloud/commandframework/context/CommandContext.java b/cloud-core/src/main/java/cloud/commandframework/context/CommandContext.java
index 9109b472e0234b479c1d7fe1d7268d5e040ad08c..63c9f03b6ccf477b3dba519a6dd7a11af80652e3 100644
--- a/cloud-core/src/main/java/cloud/commandframework/context/CommandContext.java
+++ b/cloud-core/src/main/java/cloud/commandframework/context/CommandContext.java
@@ -53,6 +53,7 @@ import org.checkerframework.checker.nullness.qual.Nullable;
  * @param <C> Command sender type
  */
 @API(status = API.Status.STABLE)
+@SuppressWarnings("unused") // cloudnet
 public class CommandContext<C> {
 
     private final CaptionVariableReplacementHandler captionVariableReplacementHandler;
@@ -145,6 +146,13 @@ public class CommandContext<C> {
             final @NonNull Caption caption,
             final @NonNull CaptionVariable... variables
     ) {
+        // cloudnet start - better captions
+        if (true) return this.captionVariableReplacementHandler.replaceVariables(
+                caption,
+                java.util.Arrays.stream(variables)
+                        .map(cloud.commandframework.captions.CaptionVariable::getValue)
+                        .toArray());
+        // cloudnet end
         return this.captionVariableReplacementHandler.replaceVariables(
                 this.captionRegistry.getCaption(caption, this.commandSender),
                 variables
@@ -673,6 +681,11 @@ public class CommandContext<C> {
         return this.commandManager.parameterInjectorRegistry().getInjectable(clazz, this, AnnotationAccessor.empty());
     }
 
+    // cloudnet start - expose caption replacement handler
+    public final @NonNull CaptionVariableReplacementHandler getCaptionVariableReplacementHandler() {
+        return this.captionVariableReplacementHandler;
+    }
+    // cloudnet end
 
     /**
      * Used to track performance metrics related to command parsing. This is attached
diff --git a/cloud-core/src/main/java/cloud/commandframework/exceptions/ArgumentParseException.java b/cloud-core/src/main/java/cloud/commandframework/exceptions/ArgumentParseException.java
index 37d8117b1b540e8f6d5d4908eb0b25fc0d630300..8d8ca6c963994227420c81eb3698e04c5b5eda23 100644
--- a/cloud-core/src/main/java/cloud/commandframework/exceptions/ArgumentParseException.java
+++ b/cloud-core/src/main/java/cloud/commandframework/exceptions/ArgumentParseException.java
@@ -29,11 +29,16 @@ import org.apiguardian.api.API;
 import org.checkerframework.checker.nullness.qual.NonNull;
 
 @API(status = API.Status.STABLE)
-public class ArgumentParseException extends CommandParseException {
+public class ArgumentParseException extends IllegalArgumentException { // cloudnet - CommandParseException -> IllegalArgumentException
 
     private static final long serialVersionUID = -4385446899439587461L;
     private final Throwable cause;
 
+    // cloudnet start - better captions
+    private final Object commandSender;
+    private final List<CommandArgument<?, ?>> currentChain;
+    // cloudnet end
+
     /**
      * Create a new command parse exception
      *
@@ -47,10 +52,24 @@ public class ArgumentParseException extends CommandParseException {
             final @NonNull Object commandSender,
             final @NonNull List<@NonNull CommandArgument<?, ?>> currentChain
     ) {
-        super(commandSender, currentChain);
+        // cloudnet start - better captions
+        //super(commandSender, currentChain);
+        this.commandSender = commandSender;
+        this.currentChain = currentChain;
+        // cloudnet end
         this.cause = throwable;
     }
 
+    // cloudnet start - better captions
+    public Object getCommandSender() {
+        return this.commandSender;
+    }
+
+    public List<CommandArgument<?, ?>> getCurrentChain() {
+        return this.currentChain;
+    }
+    // cloudnet end
+
     /**
      * Get the cause of the exception
      *
diff --git a/cloud-core/src/main/java/cloud/commandframework/exceptions/CommandParseException.java b/cloud-core/src/main/java/cloud/commandframework/exceptions/CommandParseException.java
index b83f768461093c7c562f8d88ea393cc7382e2caa..105ee6a1cbd9fead8d2c224c4ce733eda21edd9b 100644
--- a/cloud-core/src/main/java/cloud/commandframework/exceptions/CommandParseException.java
+++ b/cloud-core/src/main/java/cloud/commandframework/exceptions/CommandParseException.java
@@ -34,7 +34,7 @@ import org.checkerframework.checker.nullness.qual.NonNull;
  */
 @SuppressWarnings({"unused", "serial"})
 @API(status = API.Status.STABLE)
-public class CommandParseException extends IllegalArgumentException {
+public class CommandParseException extends eu.cloudnetservice.CaptionedCommandException { // cloudnet
 
     private static final long serialVersionUID = -2415981126382517435L;
     private final Object commandSender;
@@ -49,8 +49,14 @@ public class CommandParseException extends IllegalArgumentException {
     @API(status = API.Status.INTERNAL, consumers = "cloud.commandframework.*")
     protected CommandParseException(
             final @NonNull Object commandSender,
-            final @NonNull List<CommandArgument<?, ?>> currentChain
+            // cloudnet start - better captions
+            final @NonNull List<CommandArgument<?, ?>> currentChain,
+            final cloud.commandframework.captions.Caption caption,
+            final cloud.commandframework.captions.CaptionVariableReplacementHandler replacementHandler,
+            final @NonNull Object... captionArgs
     ) {
+        super(caption, replacementHandler, captionArgs);
+        // cloudnet end
         this.commandSender = commandSender;
         this.currentChain = currentChain;
     }
diff --git a/cloud-core/src/main/java/cloud/commandframework/exceptions/InvalidCommandSenderException.java b/cloud-core/src/main/java/cloud/commandframework/exceptions/InvalidCommandSenderException.java
index 5485cb4defc4e31297c45e8dd7892a6859d1ff20..05ee41ec9c0b928641f59f796b91f903db9e123a 100644
--- a/cloud-core/src/main/java/cloud/commandframework/exceptions/InvalidCommandSenderException.java
+++ b/cloud-core/src/main/java/cloud/commandframework/exceptions/InvalidCommandSenderException.java
@@ -52,9 +52,12 @@ public final class InvalidCommandSenderException extends CommandParseException {
     public InvalidCommandSenderException(
             final @NonNull Object commandSender,
             final @NonNull Class<?> requiredSender,
-            final @NonNull List<@NonNull CommandArgument<?, ?>> currentChain
+            // cloudnet start - better captions
+            final @NonNull List<@NonNull CommandArgument<?, ?>> currentChain,
+            final cloud.commandframework.captions.CaptionVariableReplacementHandler replacementHandler
     ) {
-        this(commandSender, requiredSender, currentChain, null);
+        this(commandSender, requiredSender, currentChain, null, replacementHandler);
+        // cloudnet end
     }
 
     /**
@@ -71,9 +74,13 @@ public final class InvalidCommandSenderException extends CommandParseException {
             final @NonNull Object commandSender,
             final @NonNull Class<?> requiredSender,
             final @NonNull List<@NonNull CommandArgument<?, ?>> currentChain,
-            final @Nullable Command<?> command
+            // cloudnet start - better captions
+            final @Nullable Command<?> command,
+            final cloud.commandframework.captions.CaptionVariableReplacementHandler replacementHandler
     ) {
-        super(commandSender, currentChain);
+        super(commandSender, currentChain, cloud.commandframework.captions.StandardCaptionKeys.INVALID_COMMAND_SENDER,
+                replacementHandler, commandSender, requiredSender);
+        // cloudnet end
         this.requiredSender = requiredSender;
         this.command = command;
     }
@@ -89,6 +96,9 @@ public final class InvalidCommandSenderException extends CommandParseException {
 
     @Override
     public String getMessage() {
+        // cloudnet start - better captions
+        if (true) return super.getMessage();
+        // cloudnet end
         return String.format(
                 "%s is not allowed to execute that command. Must be of type %s",
                 getCommandSender().getClass().getSimpleName(),
diff --git a/cloud-core/src/main/java/cloud/commandframework/exceptions/InvalidSyntaxException.java b/cloud-core/src/main/java/cloud/commandframework/exceptions/InvalidSyntaxException.java
index 6db04bdae14d307dd041f54ac8b42a5dafde69a0..d5ef1b57706d4a613c7e7b0bd9c32364f1b9f04d 100644
--- a/cloud-core/src/main/java/cloud/commandframework/exceptions/InvalidSyntaxException.java
+++ b/cloud-core/src/main/java/cloud/commandframework/exceptions/InvalidSyntaxException.java
@@ -49,9 +49,13 @@ public class InvalidSyntaxException extends CommandParseException {
     public InvalidSyntaxException(
             final @NonNull String correctSyntax,
             final @NonNull Object commandSender,
-            final @NonNull List<@NonNull CommandArgument<?, ?>> currentChain
+            // cloudnet start - better captions
+            final @NonNull List<@NonNull CommandArgument<?, ?>> currentChain,
+            final cloud.commandframework.captions.CaptionVariableReplacementHandler replacementHandler
     ) {
-        super(commandSender, currentChain);
+        super(commandSender, currentChain, cloud.commandframework.captions.StandardCaptionKeys.INVALID_COMMAND_SYNTAX,
+                replacementHandler, correctSyntax);
+        // cloudnet end
         this.correctSyntax = correctSyntax;
     }
 
@@ -67,6 +71,9 @@ public class InvalidSyntaxException extends CommandParseException {
 
     @Override
     public final String getMessage() {
+        // cloudnet start - better captions
+        if (true) return super.getMessage();
+        // cloudnet end
         return String.format("Invalid command syntax. Correct syntax is: %s", this.correctSyntax);
     }
 }
diff --git a/cloud-core/src/main/java/cloud/commandframework/exceptions/NoPermissionException.java b/cloud-core/src/main/java/cloud/commandframework/exceptions/NoPermissionException.java
index c9ff3c75753b874d410d6bbefca64e7179ba5cec..f05454e2afdbd93c99e1edc4d185a2c235cfc4ff 100644
--- a/cloud-core/src/main/java/cloud/commandframework/exceptions/NoPermissionException.java
+++ b/cloud-core/src/main/java/cloud/commandframework/exceptions/NoPermissionException.java
@@ -52,14 +52,21 @@ public class NoPermissionException extends CommandParseException {
     public NoPermissionException(
             final @NonNull CommandPermission missingPermission,
             final @NonNull Object commandSender,
-            final @NonNull List<@NonNull CommandArgument<?, ?>> currentChain
+            // cloudnet start - better captions
+            final @NonNull List<@NonNull CommandArgument<?, ?>> currentChain,
+            final cloud.commandframework.captions.CaptionVariableReplacementHandler replacementHandler
     ) {
-        super(commandSender, currentChain);
+        super(commandSender, currentChain, cloud.commandframework.captions.StandardCaptionKeys.MISSING_COMMAND_PERMISSION,
+                replacementHandler, missingPermission.toString());
+        // cloudnet end
         this.missingPermission = missingPermission;
     }
 
     @Override
     public final String getMessage() {
+        // cloudnet start - better captions
+        if (true) return super.getMessage();
+        // cloudnet end
         return String.format("Missing permission '%s'", this.missingPermission);
     }
 
diff --git a/cloud-core/src/main/java/cloud/commandframework/exceptions/NoSuchCommandException.java b/cloud-core/src/main/java/cloud/commandframework/exceptions/NoSuchCommandException.java
index 3e19a9a8599a5859b78bae90b43d8402b77294c7..254891540842ce24fdc9450bb3803485db501611 100644
--- a/cloud-core/src/main/java/cloud/commandframework/exceptions/NoSuchCommandException.java
+++ b/cloud-core/src/main/java/cloud/commandframework/exceptions/NoSuchCommandException.java
@@ -50,15 +50,22 @@ public final class NoSuchCommandException extends CommandParseException {
     public NoSuchCommandException(
             final @NonNull Object commandSender,
             final @NonNull List<CommandArgument<?, ?>> currentChain,
-            final @NonNull String command
+            // cloudnet start
+            final @NonNull String command,
+            final cloud.commandframework.captions.Caption caption,
+            final cloud.commandframework.captions.CaptionVariableReplacementHandler replacementHandler
     ) {
-        super(commandSender, currentChain);
+        super(commandSender, currentChain, caption, replacementHandler, command);
+        // cloudnet end
         this.suppliedCommand = command;
     }
 
 
     @Override
     public String getMessage() {
+        // cloudnet start - better captions
+        if (true) return super.getMessage();
+        // cloudnet end
         final StringBuilder builder = new StringBuilder();
         for (final CommandArgument<?, ?> commandArgument : this.getCurrentChain()) {
             if (commandArgument == null) {
diff --git a/cloud-core/src/main/java/cloud/commandframework/exceptions/parsing/NoInputProvidedException.java b/cloud-core/src/main/java/cloud/commandframework/exceptions/parsing/NoInputProvidedException.java
index 4f7b5b5d83a5a39ecdfbefa56af6976a817b0e26..ee29e4833b2a1b79bb2b44486ed53002a307b06c 100644
--- a/cloud-core/src/main/java/cloud/commandframework/exceptions/parsing/NoInputProvidedException.java
+++ b/cloud-core/src/main/java/cloud/commandframework/exceptions/parsing/NoInputProvidedException.java
@@ -51,7 +51,8 @@ public class NoInputProvidedException extends ParserException {
         super(
                 argumentParser,
                 context,
-                StandardCaptionKeys.ARGUMENT_PARSE_FAILURE_NO_INPUT_PROVIDED
+                StandardCaptionKeys.ARGUMENT_PARSE_FAILURE_NO_INPUT_PROVIDED, // cloudnet
+                EMPTY_OBJECTS // cloudnet
         );
     }
 }
diff --git a/cloud-core/src/main/java/cloud/commandframework/exceptions/parsing/NumberParseException.java b/cloud-core/src/main/java/cloud/commandframework/exceptions/parsing/NumberParseException.java
index 32ff6dc6f3d34b4d930509aea9bb44be86f71d7c..1046b94f8024e5b6b4c0d773c0a440ec34b88cf5 100644
--- a/cloud-core/src/main/java/cloud/commandframework/exceptions/parsing/NumberParseException.java
+++ b/cloud-core/src/main/java/cloud/commandframework/exceptions/parsing/NumberParseException.java
@@ -57,9 +57,12 @@ public abstract class NumberParseException extends ParserException {
                 parserClass,
                 context,
                 StandardCaptionKeys.ARGUMENT_PARSE_FAILURE_NUMBER,
-                CaptionVariable.of("input", input),
-                CaptionVariable.of("min", String.valueOf(min)),
-                CaptionVariable.of("max", String.valueOf(max))
+                // cloudnet start - better captions
+                input, min, max
+                //CaptionVariable.of("input", input),
+                //CaptionVariable.of("min", String.valueOf(min)),
+                //CaptionVariable.of("max", String.valueOf(max))
+                // cloudnet end
         );
         this.input = input;
         this.min = min;
diff --git a/cloud-core/src/main/java/cloud/commandframework/exceptions/parsing/ParserException.java b/cloud-core/src/main/java/cloud/commandframework/exceptions/parsing/ParserException.java
index df3849eaf3226866cae1ab9c04c50120a6f94ea3..5f999902c1337ca6b674a8f7b0688aac7976e265 100644
--- a/cloud-core/src/main/java/cloud/commandframework/exceptions/parsing/ParserException.java
+++ b/cloud-core/src/main/java/cloud/commandframework/exceptions/parsing/ParserException.java
@@ -32,7 +32,9 @@ import org.checkerframework.checker.nullness.qual.NonNull;
 
 @SuppressWarnings("serial")
 @API(status = API.Status.STABLE)
-public class ParserException extends IllegalArgumentException {
+public class ParserException extends eu.cloudnetservice.CaptionedCommandException { // cloudnet
+    protected static final CaptionVariable[] EMPTY_VARIABLES = new CaptionVariable[0]; // cloudnet
+    protected static final Object[] EMPTY_OBJECTS = new Object[0];
 
     private static final long serialVersionUID = -4409795575435072170L;
     private final Class<?> argumentParser;
@@ -46,14 +48,33 @@ public class ParserException extends IllegalArgumentException {
             final @NonNull Caption errorCaption,
             final @NonNull CaptionVariable... captionVariables
     ) {
+        super(errorCaption, context.getCaptionVariableReplacementHandler(), captionVariables); // cloudnet
         this.argumentParser = argumentParser;
         this.context = context;
         this.errorCaption = errorCaption;
         this.captionVariables = captionVariables;
     }
 
+    // cloudnet start - better captions
+    protected ParserException(
+            final @NonNull Class<?> argumentParser,
+            final @NonNull CommandContext<?> context,
+            final @NonNull Caption errorCaption,
+            final @NonNull Object... captionVariables
+    ) {
+        super(errorCaption, context.getCaptionVariableReplacementHandler(), captionVariables);
+        this.argumentParser = argumentParser;
+        this.context = context;
+        this.errorCaption = errorCaption;
+        this.captionVariables = EMPTY_VARIABLES;
+    }
+    // cloudnet end
+
     @Override
     public final String getMessage() {
+        // cloudnet start - handled by super
+        if (true) return super.getMessage();
+        // cloudnet end
         return this.context.formatMessage(
                 this.errorCaption,
                 this.captionVariables
diff --git a/cloud-core/src/main/java/eu/cloudnetservice/CaptionedCommandException.java b/cloud-core/src/main/java/eu/cloudnetservice/CaptionedCommandException.java
new file mode 100644
index 0000000000000000000000000000000000000000..c34c1cd4a5b30135c30fddf59bcd0ecbc488d594
--- /dev/null
+++ b/cloud-core/src/main/java/eu/cloudnetservice/CaptionedCommandException.java
@@ -0,0 +1,51 @@
+package eu.cloudnetservice;
+
+import cloud.commandframework.captions.Caption;
+import cloud.commandframework.captions.CaptionVariable;
+import cloud.commandframework.captions.CaptionVariableReplacementHandler;
+import java.util.Arrays;
+import org.apiguardian.api.API;
+import org.checkerframework.checker.nullness.qual.NonNull;
+
+/**
+ * Represents an exception thrown by anything which has a caption.
+ */
+
+@API(since = "1.7.0", status = API.Status.INTERNAL, consumers = "cloud.commandframework.*")
+public class CaptionedCommandException extends RuntimeException {
+
+    private static final long serialVersionUID = -8689529275698731177L;
+
+    private final String message;
+
+    protected CaptionedCommandException(
+            final @NonNull Caption caption,
+            final @NonNull CaptionVariableReplacementHandler replacementHandler,
+            final @NonNull CaptionVariable... captionArgs
+    ) {
+        this(caption, replacementHandler, Arrays.stream(captionArgs).map(CaptionVariable::getValue).toArray());
+    }
+
+    public CaptionedCommandException(
+            final @NonNull Caption caption,
+            final @NonNull CaptionVariableReplacementHandler replacementHandler,
+            final @NonNull Object... captionArgs
+    ) {
+        this.message = replacementHandler.replaceVariables(caption, captionArgs);
+    }
+
+    @Override
+    public String getMessage() {
+        return this.message;
+    }
+
+    @Override
+    public synchronized Throwable fillInStackTrace() {
+        return this;
+    }
+
+    @Override
+    public synchronized Throwable initCause(final Throwable cause) {
+        return this;
+    }
+}
diff --git a/cloud-irc/cloud-pircbotx/src/main/java/cloud/commandframework/pircbotx/arguments/UserArgument.java b/cloud-irc/cloud-pircbotx/src/main/java/cloud/commandframework/pircbotx/arguments/UserArgument.java
index 6c23c3eb823a56464c51c7cfad3fc61b877b4cb7..8de36562df7614e188cafd01fcc3b842e7a9b3ef 100644
--- a/cloud-irc/cloud-pircbotx/src/main/java/cloud/commandframework/pircbotx/arguments/UserArgument.java
+++ b/cloud-irc/cloud-pircbotx/src/main/java/cloud/commandframework/pircbotx/arguments/UserArgument.java
@@ -188,10 +188,13 @@ public final class UserArgument<C> extends CommandArgument<C, User> {
                     UserArgumentParser.class,
                     context,
                     PircBotXCommandManager.ARGUMENT_PARSE_FAILURE_USER_KEY,
-                    CaptionVariable.of(
-                            "input",
-                            input
-                    )
+                    // cloudnet start - better captions
+                    input
+                    //CaptionVariable.of(
+                    //        "input",
+                    //        input
+                    //)
+                    // cloudnet end
             );
         }
     }
diff --git a/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/argument/NamespacedKeyArgument.java b/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/argument/NamespacedKeyArgument.java
index d95089edcf7f5df828a991d51933cbdc8403cb4b..6a735bc3ab63cc1800bfa5c84f5597d15876b49c 100644
--- a/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/argument/NamespacedKeyArgument.java
+++ b/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/argument/NamespacedKeyArgument.java
@@ -315,7 +315,10 @@ public final class NamespacedKeyArgument<C> extends CommandArgument<C, Namespace
                     Parser.class,
                     context,
                     caption,
-                    CaptionVariable.of("input", input)
+                    // cloudnet start - better captions
+                    input
+                    //CaptionVariable.of("input", input)
+                    // cloudnet end
             );
             this.input = input;
         }
diff --git a/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/EnchantmentArgument.java b/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/EnchantmentArgument.java
index 110b2cb67fb2295eb33ac8693aa25a5591ab536b..0013cfd110ede42a69d5fbab76a642b8500fef91 100644
--- a/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/EnchantmentArgument.java
+++ b/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/EnchantmentArgument.java
@@ -223,7 +223,10 @@ public class EnchantmentArgument<C> extends CommandArgument<C, Enchantment> {
                     EnchantmentParser.class,
                     context,
                     BukkitCaptionKeys.ARGUMENT_PARSE_FAILURE_ENCHANTMENT,
-                    CaptionVariable.of("input", input)
+                    // cloudnet start - better captions
+                    input
+                    // CaptionVariable.of("input", input)
+                    // cloudnet end
             );
             this.input = input;
         }
diff --git a/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/MaterialArgument.java b/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/MaterialArgument.java
index 1d7fb70d5c308376f95fca334086ab085a5492a5..1e38591ad0d41797b37bd29ad157736ab7761d02 100644
--- a/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/MaterialArgument.java
+++ b/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/MaterialArgument.java
@@ -198,7 +198,10 @@ public class MaterialArgument<C> extends CommandArgument<C, Material> {
                     MaterialParser.class,
                     context,
                     BukkitCaptionKeys.ARGUMENT_PARSE_FAILURE_MATERIAL,
-                    CaptionVariable.of("input", input)
+                    // cloudnet start - better captions
+                    input
+                    //CaptionVariable.of("input", input)
+                    // cloudnet end
             );
             this.input = input;
         }
diff --git a/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/OfflinePlayerArgument.java b/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/OfflinePlayerArgument.java
index 823efc238e99ef9e58adb508e7cf54bc766d6420..cc4e8f204394bd9a624faed6e04b50425bdd4231 100644
--- a/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/OfflinePlayerArgument.java
+++ b/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/OfflinePlayerArgument.java
@@ -228,7 +228,10 @@ public final class OfflinePlayerArgument<C> extends CommandArgument<C, OfflinePl
                     OfflinePlayerParser.class,
                     context,
                     BukkitCaptionKeys.ARGUMENT_PARSE_FAILURE_OFFLINEPLAYER,
-                    CaptionVariable.of("input", input)
+                    // cloudnet start - better captions
+                    input
+                    //CaptionVariable.of("input", input)
+                    // cloudnet end
             );
             this.input = input;
         }
diff --git a/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/PlayerArgument.java b/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/PlayerArgument.java
index 0102d11d6dd80037aa29cb0db2c09b9c497391b4..d231f918581eb652b2f83f0fd6660db565334b8a 100644
--- a/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/PlayerArgument.java
+++ b/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/PlayerArgument.java
@@ -220,7 +220,10 @@ public final class PlayerArgument<C> extends CommandArgument<C, Player> {
                     PlayerParser.class,
                     context,
                     BukkitCaptionKeys.ARGUMENT_PARSE_FAILURE_PLAYER,
-                    CaptionVariable.of("input", input)
+                    // cloudnet start - better captions
+                    input
+                    //CaptionVariable.of("input", input)
+                    // cloudnet end
             );
             this.input = input;
         }
diff --git a/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/WorldArgument.java b/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/WorldArgument.java
index 3465ab37c5110bfa5654cd324e7e20f8cb871ba3..31a12ec0c629af66ded05c4914f0832c8862a93c 100644
--- a/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/WorldArgument.java
+++ b/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/WorldArgument.java
@@ -193,7 +193,10 @@ public class WorldArgument<C> extends CommandArgument<C, World> {
                     WorldParser.class,
                     context,
                     BukkitCaptionKeys.ARGUMENT_PARSE_FAILURE_WORLD,
-                    CaptionVariable.of("input", input)
+                    // cloudnet start - better captions
+                    input
+                    //CaptionVariable.of("input", input)
+                    // cloudnet end
             );
             this.input = input;
         }
diff --git a/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/location/LocationArgument.java b/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/location/LocationArgument.java
index 8904c46e8846db23f1866f71850e08164ac861c6..ef51b7441e0cc3fd22e4b8281bd530644a9f5344 100644
--- a/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/location/LocationArgument.java
+++ b/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/location/LocationArgument.java
@@ -329,7 +329,10 @@ public final class LocationArgument<C> extends CommandArgument<C, Location> {
                     LocationParser.class,
                     context,
                     reason.getCaption(),
-                    CaptionVariable.of("input", input)
+                    // cloudnet start - better captions
+                    input
+                    //CaptionVariable.of("input", input)
+                    // cloudnet end
             );
         }
 
diff --git a/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/selector/SelectorParseException.java b/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/selector/SelectorParseException.java
index 5672df220ace7e22702cc266345d17a5d9c8fb22..425e6363b3ffeffcfe6012691f90d94eba49f8d6 100644
--- a/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/selector/SelectorParseException.java
+++ b/cloud-minecraft/cloud-bukkit/src/main/java/cloud/commandframework/bukkit/parsers/selector/SelectorParseException.java
@@ -58,7 +58,10 @@ public final class SelectorParseException extends ParserException {
                 parser,
                 context,
                 reason.getCaption(),
-                CaptionVariable.of("input", input)
+                // cloudnet start - better captions
+                input
+                //CaptionVariable.of("input", input)
+                // cloudnet end
         );
         this.reason = reason;
         this.input = input;
diff --git a/cloud-minecraft/cloud-bungee/src/main/java/cloud/commandframework/bungee/arguments/PlayerArgument.java b/cloud-minecraft/cloud-bungee/src/main/java/cloud/commandframework/bungee/arguments/PlayerArgument.java
index 2adbd85ecf40f8c57dbde6d505e954a3c0a997f1..ce8101920eae056624ffe9b8629cce37f562323e 100644
--- a/cloud-minecraft/cloud-bungee/src/main/java/cloud/commandframework/bungee/arguments/PlayerArgument.java
+++ b/cloud-minecraft/cloud-bungee/src/main/java/cloud/commandframework/bungee/arguments/PlayerArgument.java
@@ -208,7 +208,10 @@ public final class PlayerArgument<C> extends CommandArgument<C, ProxiedPlayer> {
                     PlayerParser.class,
                     context,
                     BungeeCaptionKeys.ARGUMENT_PARSE_FAILURE_PLAYER,
-                    CaptionVariable.of("input", input)
+                    // cloudnet start - better captions
+                    input
+                    //CaptionVariable.of("input", input)
+                    // cloudnet end
             );
         }
     }
diff --git a/cloud-minecraft/cloud-bungee/src/main/java/cloud/commandframework/bungee/arguments/ServerArgument.java b/cloud-minecraft/cloud-bungee/src/main/java/cloud/commandframework/bungee/arguments/ServerArgument.java
index 10eec1e83a64b6265d0f526505e7053352566d16..75e23027aea5fcf2b85b50271442ecdbc255ac39 100644
--- a/cloud-minecraft/cloud-bungee/src/main/java/cloud/commandframework/bungee/arguments/ServerArgument.java
+++ b/cloud-minecraft/cloud-bungee/src/main/java/cloud/commandframework/bungee/arguments/ServerArgument.java
@@ -196,7 +196,10 @@ public final class ServerArgument<C> extends CommandArgument<C, ServerInfo> {
                     ServerParser.class,
                     context,
                     BungeeCaptionKeys.ARGUMENT_PARSE_FAILURE_SERVER,
-                    CaptionVariable.of("input", input)
+                    // cloudnet start - better captions
+                    input
+                    //CaptionVariable.of("input", input)
+                    // cloudnet end
             );
         }
     }
diff --git a/cloud-minecraft/cloud-fabric/src/main/java/cloud/commandframework/fabric/argument/RegistryEntryArgument.java b/cloud-minecraft/cloud-fabric/src/main/java/cloud/commandframework/fabric/argument/RegistryEntryArgument.java
index e0afedb99d47c2c7751a33adcb4a2f421e02191a..7ed628ea9c0bb0529b97f21f5fb44871be917ebb 100644
--- a/cloud-minecraft/cloud-fabric/src/main/java/cloud/commandframework/fabric/argument/RegistryEntryArgument.java
+++ b/cloud-minecraft/cloud-fabric/src/main/java/cloud/commandframework/fabric/argument/RegistryEntryArgument.java
@@ -345,8 +345,11 @@ public class RegistryEntryArgument<C, V> extends CommandArgument<C, V> {
                     RegistryEntryArgument.class,
                     context,
                     FabricCaptionKeys.ARGUMENT_PARSE_FAILURE_REGISTRY_ENTRY_UNKNOWN_ENTRY,
-                    CaptionVariable.of("id", key.toString()),
-                    CaptionVariable.of("registry", registry.toString())
+                    // cloudnet start - better captions
+                    key.toString(), registry.toString()
+                    //CaptionVariable.of("id", key.toString()),
+                    //CaptionVariable.of("registry", registry.toString())
+                    // cloudnet end
             );
         }
     }
diff --git a/cloud-minecraft/cloud-fabric/src/main/java/cloud/commandframework/fabric/argument/TeamArgument.java b/cloud-minecraft/cloud-fabric/src/main/java/cloud/commandframework/fabric/argument/TeamArgument.java
index 57609f3de23b45092bc4fb2c98f915ccca23cb08..89bd1675c4123e9a7092217226731c6557c53fc7 100644
--- a/cloud-minecraft/cloud-fabric/src/main/java/cloud/commandframework/fabric/argument/TeamArgument.java
+++ b/cloud-minecraft/cloud-fabric/src/main/java/cloud/commandframework/fabric/argument/TeamArgument.java
@@ -234,7 +234,10 @@ public final class TeamArgument<C> extends CommandArgument<C, PlayerTeam> {
                     TeamParser.class,
                     context,
                     FabricCaptionKeys.ARGUMENT_PARSE_FAILURE_TEAM_UNKNOWN,
-                    CaptionVariable.of("input", input)
+                    // cloudnet start - better captions
+                    input
+                    //CaptionVariable.of("input", input)
+                    // cloudnet end
             );
         }
     }
diff --git a/cloud-minecraft/cloud-minecraft-extras/src/main/java/cloud/commandframework/minecraft/extras/TextColorArgument.java b/cloud-minecraft/cloud-minecraft-extras/src/main/java/cloud/commandframework/minecraft/extras/TextColorArgument.java
index 538ea655e49d6cacaad7890c04e089f217d33b81..5d3d50f785861518df04bacca3bc12fe64e46765 100644
--- a/cloud-minecraft/cloud-minecraft-extras/src/main/java/cloud/commandframework/minecraft/extras/TextColorArgument.java
+++ b/cloud-minecraft/cloud-minecraft-extras/src/main/java/cloud/commandframework/minecraft/extras/TextColorArgument.java
@@ -227,7 +227,10 @@ public final class TextColorArgument<C> extends CommandArgument<C, TextColor> {
                     TextColorParser.class,
                     commandContext,
                     StandardCaptionKeys.ARGUMENT_PARSE_FAILURE_COLOR,
-                    CaptionVariable.of("input", input)
+                    // cloudnet start - better captions
+                    input
+                    //CaptionVariable.of("input", input)
+                    // cloudnet end
             );
         }
     }
diff --git a/cloud-minecraft/cloud-velocity/src/main/java/cloud/commandframework/velocity/arguments/PlayerArgument.java b/cloud-minecraft/cloud-velocity/src/main/java/cloud/commandframework/velocity/arguments/PlayerArgument.java
index b486857b8787f51cf48e72daa1949bb1afd7a224..2ce9e912fb452c483270ff1db2cebea0e59758e9 100644
--- a/cloud-minecraft/cloud-velocity/src/main/java/cloud/commandframework/velocity/arguments/PlayerArgument.java
+++ b/cloud-minecraft/cloud-velocity/src/main/java/cloud/commandframework/velocity/arguments/PlayerArgument.java
@@ -203,7 +203,10 @@ public final class PlayerArgument<C> extends CommandArgument<C, Player> {
                     PlayerParser.class,
                     context,
                     VelocityCaptionKeys.ARGUMENT_PARSE_FAILURE_PLAYER,
-                    CaptionVariable.of("input", input)
+                    // cloudnet start - better captions
+                    input
+                    //CaptionVariable.of("input", input)
+                    // cloudnet start - better captions
             );
         }
     }
diff --git a/cloud-minecraft/cloud-velocity/src/main/java/cloud/commandframework/velocity/arguments/ServerArgument.java b/cloud-minecraft/cloud-velocity/src/main/java/cloud/commandframework/velocity/arguments/ServerArgument.java
index aa61b995ed39274b61047e250a364d24bee71e06..910b221d48a715963601c68b9c137a68e49c85c3 100644
--- a/cloud-minecraft/cloud-velocity/src/main/java/cloud/commandframework/velocity/arguments/ServerArgument.java
+++ b/cloud-minecraft/cloud-velocity/src/main/java/cloud/commandframework/velocity/arguments/ServerArgument.java
@@ -196,7 +196,10 @@ public final class ServerArgument<C> extends CommandArgument<C, RegisteredServer
                     ServerParser.class,
                     context,
                     VelocityCaptionKeys.ARGUMENT_PARSE_FAILURE_SERVER,
-                    CaptionVariable.of("input", input)
+                    // cloudnet start - better captions
+                    input
+                    //CaptionVariable.of("input", input)
+                    // cloudnet end
             );
         }
     }
