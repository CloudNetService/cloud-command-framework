From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: derklaro <git@derklaro.dev>
Date: Wed, 24 Aug 2022 10:14:50 +0200
Subject: [PATCH] fix root command unregister

Unregistering a root command which has an argument with the same name
as another root command causes the other root command to be
unregistered as well. Instead of checking if the command tree contains
a root command with the same name as the child node, we now just pass
in a boolean which indicates if a command is a root command or a child
node of a root command.

diff --git a/cloud-core/src/main/java/cloud/commandframework/CommandManager.java b/cloud-core/src/main/java/cloud/commandframework/CommandManager.java
index 96ca0acad15b9044d6677bc33eb23c4cfa72d789..b5be42364ae050e5adab58f5a8a70dffc960f1ec 100644
--- a/cloud-core/src/main/java/cloud/commandframework/CommandManager.java
+++ b/cloud-core/src/main/java/cloud/commandframework/CommandManager.java
@@ -545,7 +545,7 @@ public abstract class CommandManager<C> {
         this.commandRegistrationHandler.unregisterRootCommand((StaticArgument<?>) node.getValue());
 
         // We then delete it from the tree.
-        this.commandTree.deleteRecursively(node);
+        this.commandTree.deleteRecursively(node, true); // cloudnet
 
         // And lastly we re-build the entire tree.
         this.commandTree.verifyAndRegister();
diff --git a/cloud-core/src/main/java/cloud/commandframework/CommandTree.java b/cloud-core/src/main/java/cloud/commandframework/CommandTree.java
index dcc6a990a12b2bec74c70696e906a419855cc422..de9fa8684d18242c1548e88514dc44e516827581 100644
--- a/cloud-core/src/main/java/cloud/commandframework/CommandTree.java
+++ b/cloud-core/src/main/java/cloud/commandframework/CommandTree.java
@@ -996,17 +996,17 @@ public final class CommandTree<C> {
         return null;
     }
 
-    void deleteRecursively(final @NonNull Node<@Nullable CommandArgument<C, ?>> node) {
+    void deleteRecursively(final @NonNull Node<@Nullable CommandArgument<C, ?>> node, final boolean root) { // cloudnet
         for (final Node<@Nullable CommandArgument<C, ?>> child : new ArrayList<>(node.children)) {
-            this.deleteRecursively(child);
+            this.deleteRecursively(child, false); // cloudnet
         }
 
         // We need to remove it from the tree.
-        this.removeNode(node);
+        this.removeNode(node, root); // cloudnet
     }
 
-    private boolean removeNode(final @NonNull Node<@Nullable CommandArgument<C, ?>> node) {
-        if (this.getRootNodes().contains(node)) {
+    private boolean removeNode(final @NonNull Node<@Nullable CommandArgument<C, ?>> node, final boolean root) { // cloudnet
+        if (root) { // cloudnet
             this.internalTree.removeChild(node);
         } else {
             return node.getParent().removeChild(node);
